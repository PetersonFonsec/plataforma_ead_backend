generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  name           String
  password       String           @default("")
  photo          String           @default("")
  documentNumber String           @unique
  active         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           Role             @default(STUDENT)
  Post           Post[]
  Lesson         Lesson[]
  College        College[]
  CollegeStudent CollegeStudent[]
}

enum Role {
  TEACHER
  STUDENT
  DIRECTOR
  ADMIN
}

model College {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  name           String
  Course         Course[]
  CollegeStyle   CollegeStyle[]
  CollegeStudent CollegeStudent[]
  MediaRelation  MediaRelation[]
  Post           Post[]
}

model CollegeStudent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  college   College  @relation(fields: [collegeId], references: [id])
  collegeId Int
}

model CollegeStyle {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  primaryColor   String   @default("")
  secundaryColor String   @default("")
  thumb          String   @default("")
  college        College  @relation(fields: [collegeId], references: [id])
  collegeId      Int
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  thumb     String
  college   College  @relation(fields: [collegeId], references: [id])
  collegeId Int
  Post      Post[]
  Lesson    Lesson[]
  Task      Task[]
  Quiz      Quiz[]
  Event     Event[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  college   College  @relation(fields: [collegeId], references: [id])
  collegeId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
}

model Lesson {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  content     String   @default("")
  title       String
  urlContent  String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
}

model Task {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enunciation String
  describe    String
  Course      Course?  @relation(fields: [courseId], references: [id])
  courseId    Int?
}

model Quiz {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  Course      Course?       @relation(fields: [courseId], references: [id])
  courseId    Int?
  QuizOptions QuizOptions[]
}

model QuizOptions {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  title          String
  correctOptions Boolean  @default(false)
  Quiz           Quiz?    @relation(fields: [quizId], references: [id])
  quizId         Int?
}

model Media {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  type          String
  cdnId         String          @unique
  MediaRelation MediaRelation[]
}

model MediaRelation {
  id        Int      @id @default(autoincrement())
  Media     Media?   @relation(fields: [mediaId], references: [id])
  mediaId   Int
  College   College? @relation(fields: [collegeId], references: [id])
  collegeId Int
}

model Event {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  type        EventTypes @default(OTHERS)
  title       String
  description String
  date        DateTime
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    Int
}

enum EventTypes {
  MEETING
  PROOF
  LIVECLASS
  OTHERS
}
