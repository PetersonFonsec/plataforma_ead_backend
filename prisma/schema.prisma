generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  name           String
  password       String           @default("")
  photo          String           @default("")
  documentNumber String           @unique
  active         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           Role             @default(STUDENT)
  Post           Post[]
  Progress       Progress[]
  Lesson         Lesson[]
  Calendar       Calendar[]
  College        College[]
  CollegeStudent CollegeStudent[]
}

enum Role {
  TEACHER
  STUDENT
  DIRECTOR
  ADMIN
}

model College {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  name           String
  primaryColor   String           @default("")
  secundaryColor String           @default("")
  thumb          String           @default("")
  Course         Course[]
  CollegeStyle   CollegeStyle[]
  CollegeStudent CollegeStudent[]
}

model CollegeStudent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  college   College  @relation(fields: [collegeId], references: [id])
  collegeId Int
}

model CollegeStyle {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  primaryColor   String
  secundaryColor String
  thumb          String
  College        College  @relation(fields: [CollegeId], references: [id])
  CollegeId      Int
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  thumb     String
  College   College  @relation(fields: [CollegeId], references: [id])
  CollegeId Int
  Post      Post[]
  Lesson    Lesson[]
  Task      Task[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  published Boolean  @default(false)
  college   User     @relation(fields: [collegeId], references: [id])
  collegeId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
}

model Lesson {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  title       String
  urlContent  String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
}

model Task {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  finish    Boolean    @default(false)
  student   Course     @relation(fields: [studentID], references: [id])
  studentID Int
  Progress  Progress[]
  Calendar  Calendar[]
}

model Calendar {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   User     @relation(fields: [studentID], references: [id])
  studentID Int
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
}

model Progress {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  student   User     @relation(fields: [studentId], references: [id])
  studentId Int
  finish    Boolean  @default(false)
}
